/*Copyright (c) 2016-2017 imaginea.com All Rights Reserved.
 This software is the confidential and proprietary information of imaginea.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with imaginea.com*/
package com.guardian.sessiondb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.guardian.sessiondb.SpringSessionAttributes;
import com.guardian.sessiondb.SpringSessionAttributesId;


/**
 * ServiceImpl object for domain model class SpringSessionAttributes.
 *
 * @see SpringSessionAttributes
 */
@Service("SessionDB.SpringSessionAttributesService")
public class SpringSessionAttributesServiceImpl implements SpringSessionAttributesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SpringSessionAttributesServiceImpl.class);


    @Autowired
    @Qualifier("SessionDB.SpringSessionAttributesDao")
    private WMGenericDao<SpringSessionAttributes, SpringSessionAttributesId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<SpringSessionAttributes, SpringSessionAttributesId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SessionDBTransactionManager")
    @Override
	public SpringSessionAttributes create(SpringSessionAttributes springSessionAttributes) {
        LOGGER.debug("Creating a new SpringSessionAttributes with information: {}", springSessionAttributes);
        SpringSessionAttributes springSessionAttributesCreated = this.wmGenericDao.create(springSessionAttributes);
        return springSessionAttributesCreated;
    }

	@Transactional(readOnly = true, value = "SessionDBTransactionManager")
	@Override
	public SpringSessionAttributes getById(SpringSessionAttributesId springsessionattributesId) throws EntityNotFoundException {
        LOGGER.debug("Finding SpringSessionAttributes by id: {}", springsessionattributesId);
        SpringSessionAttributes springSessionAttributes = this.wmGenericDao.findById(springsessionattributesId);
        if (springSessionAttributes == null){
            LOGGER.debug("No SpringSessionAttributes found with id: {}", springsessionattributesId);
            throw new EntityNotFoundException(String.valueOf(springsessionattributesId));
        }
        return springSessionAttributes;
    }

    @Transactional(readOnly = true, value = "SessionDBTransactionManager")
	@Override
	public SpringSessionAttributes findById(SpringSessionAttributesId springsessionattributesId) {
        LOGGER.debug("Finding SpringSessionAttributes by id: {}", springsessionattributesId);
        return this.wmGenericDao.findById(springsessionattributesId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SessionDBTransactionManager")
	@Override
	public SpringSessionAttributes update(SpringSessionAttributes springSessionAttributes) throws EntityNotFoundException {
        LOGGER.debug("Updating SpringSessionAttributes with information: {}", springSessionAttributes);
        this.wmGenericDao.update(springSessionAttributes);

        SpringSessionAttributesId springsessionattributesId = new SpringSessionAttributesId();
        springsessionattributesId.setSessionId(springSessionAttributes.getSessionId());
        springsessionattributesId.setAttributeName(springSessionAttributes.getAttributeName());

        return this.wmGenericDao.findById(springsessionattributesId);
    }

    @Transactional(value = "SessionDBTransactionManager")
	@Override
	public SpringSessionAttributes delete(SpringSessionAttributesId springsessionattributesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting SpringSessionAttributes with id: {}", springsessionattributesId);
        SpringSessionAttributes deleted = this.wmGenericDao.findById(springsessionattributesId);
        if (deleted == null) {
            LOGGER.debug("No SpringSessionAttributes found with id: {}", springsessionattributesId);
            throw new EntityNotFoundException(String.valueOf(springsessionattributesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SessionDBTransactionManager")
	@Override
	public Page<SpringSessionAttributes> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all SpringSessionAttributes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SessionDBTransactionManager")
    @Override
    public Page<SpringSessionAttributes> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all SpringSessionAttributes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SessionDBTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SessionDB for table SpringSessionAttributes to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SessionDBTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SessionDBTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

