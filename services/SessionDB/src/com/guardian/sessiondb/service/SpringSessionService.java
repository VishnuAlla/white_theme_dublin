/*Copyright (c) 2016-2017 imaginea.com All Rights Reserved.
 This software is the confidential and proprietary information of imaginea.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with imaginea.com*/
package com.guardian.sessiondb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.guardian.sessiondb.SpringSession;

/**
 * Service object for domain model class {@link SpringSession}.
 */
public interface SpringSessionService {

    /**
     * Creates a new SpringSession. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on SpringSession if any.
     *
     * @param springSession Details of the SpringSession to be created; value cannot be null.
     * @return The newly created SpringSession.
     */
	SpringSession create(SpringSession springSession);


	/**
	 * Returns SpringSession by given id if exists.
	 *
	 * @param springsessionId The id of the SpringSession to get; value cannot be null.
	 * @return SpringSession associated with the given springsessionId.
     * @throws EntityNotFoundException If no SpringSession is found.
	 */
	SpringSession getById(String springsessionId) throws EntityNotFoundException;

    /**
	 * Find and return the SpringSession by given id if exists, returns null otherwise.
	 *
	 * @param springsessionId The id of the SpringSession to get; value cannot be null.
	 * @return SpringSession associated with the given springsessionId.
	 */
	SpringSession findById(String springsessionId);


	/**
	 * Updates the details of an existing SpringSession. It replaces all fields of the existing SpringSession with the given springSession.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on SpringSession if any.
     *
	 * @param springSession The details of the SpringSession to be updated; value cannot be null.
	 * @return The updated SpringSession.
	 * @throws EntityNotFoundException if no SpringSession is found with given input.
	 */
	SpringSession update(SpringSession springSession) throws EntityNotFoundException;

    /**
	 * Deletes an existing SpringSession with the given id.
	 *
	 * @param springsessionId The id of the SpringSession to be deleted; value cannot be null.
	 * @return The deleted SpringSession.
	 * @throws EntityNotFoundException if no SpringSession found with the given id.
	 */
	SpringSession delete(String springsessionId) throws EntityNotFoundException;

	/**
	 * Find all SpringSessions matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching SpringSessions.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<SpringSession> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all SpringSessions matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching SpringSessions.
     *
     * @see Pageable
     * @see Page
	 */
    Page<SpringSession> findAll(String query, Pageable pageable);

    /**
	 * Exports all SpringSessions matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the SpringSessions in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the SpringSession.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

