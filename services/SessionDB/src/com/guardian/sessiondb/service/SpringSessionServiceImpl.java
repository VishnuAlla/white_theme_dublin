/*Copyright (c) 2016-2017 imaginea.com All Rights Reserved.
 This software is the confidential and proprietary information of imaginea.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with imaginea.com*/
package com.guardian.sessiondb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.guardian.sessiondb.SpringSession;


/**
 * ServiceImpl object for domain model class SpringSession.
 *
 * @see SpringSession
 */
@Service("SessionDB.SpringSessionService")
public class SpringSessionServiceImpl implements SpringSessionService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SpringSessionServiceImpl.class);


    @Autowired
    @Qualifier("SessionDB.SpringSessionDao")
    private WMGenericDao<SpringSession, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<SpringSession, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SessionDBTransactionManager")
    @Override
	public SpringSession create(SpringSession springSession) {
        LOGGER.debug("Creating a new SpringSession with information: {}", springSession);
        SpringSession springSessionCreated = this.wmGenericDao.create(springSession);
        return springSessionCreated;
    }

	@Transactional(readOnly = true, value = "SessionDBTransactionManager")
	@Override
	public SpringSession getById(String springsessionId) throws EntityNotFoundException {
        LOGGER.debug("Finding SpringSession by id: {}", springsessionId);
        SpringSession springSession = this.wmGenericDao.findById(springsessionId);
        if (springSession == null){
            LOGGER.debug("No SpringSession found with id: {}", springsessionId);
            throw new EntityNotFoundException(String.valueOf(springsessionId));
        }
        return springSession;
    }

    @Transactional(readOnly = true, value = "SessionDBTransactionManager")
	@Override
	public SpringSession findById(String springsessionId) {
        LOGGER.debug("Finding SpringSession by id: {}", springsessionId);
        return this.wmGenericDao.findById(springsessionId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SessionDBTransactionManager")
	@Override
	public SpringSession update(SpringSession springSession) throws EntityNotFoundException {
        LOGGER.debug("Updating SpringSession with information: {}", springSession);
        this.wmGenericDao.update(springSession);

        String springsessionId = springSession.getSessionId();

        return this.wmGenericDao.findById(springsessionId);
    }

    @Transactional(value = "SessionDBTransactionManager")
	@Override
	public SpringSession delete(String springsessionId) throws EntityNotFoundException {
        LOGGER.debug("Deleting SpringSession with id: {}", springsessionId);
        SpringSession deleted = this.wmGenericDao.findById(springsessionId);
        if (deleted == null) {
            LOGGER.debug("No SpringSession found with id: {}", springsessionId);
            throw new EntityNotFoundException(String.valueOf(springsessionId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SessionDBTransactionManager")
	@Override
	public Page<SpringSession> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all SpringSessions");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SessionDBTransactionManager")
    @Override
    public Page<SpringSession> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all SpringSessions");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SessionDBTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SessionDB for table SpringSession to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SessionDBTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SessionDBTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

